#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_float32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require

#include "ray_payload.glsl"

const float MIN_T = 0.001;
const float MAX_T = 10000.0;

layout(push_constant) uniform PushConstants {
    layout(offset = 0) f32mat3 view;
    layout(offset = 48) f32vec3 view_position;
    layout(offset = 60) float32_t aspect_ratio;
    layout(offset = 64) float32_t fov_y; // in radians
    layout(offset = 68) uint32_t frame_idx;
} push_const;

layout(binding = 0, rgba8) restrict writeonly uniform image2D framebuffer;
layout(binding = 1) uniform accelerationStructureEXT tlas;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

vec3 camera_ray(vec2 tex_coord) {
    vec2 camera_coord = 2.0 * (tex_coord - 0.5);
    float focal_len = 1.0 / tan(0.5 * push_const.fov_y);

    return push_const.view
        * vec3(camera_coord.x * push_const.aspect_ratio, -camera_coord.y, -focal_len);
}

void main() {
    ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    vec2 pixel_offset = vec2(0.5);
    vec2 tex_coord = (vec2(pixel) + pixel_offset) / vec2(gl_LaunchSizeEXT.xy);

    ray_payload.origin = push_const.view_position;
    ray_payload.direction = camera_ray(tex_coord);
    ray_payload.color = vec3(1.0, 0.0, 1.0);

    traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0,
                ray_payload.origin, MIN_T,
                ray_payload.direction, MAX_T,
                0);

    imageStore(framebuffer, pixel, vec4(ray_payload.color, 1.0));
}
